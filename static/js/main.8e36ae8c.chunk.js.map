{"version":3,"sources":["views/thumb-up.svg","views/splash.jsx","components/button.jsx","components/option.jsx","components/step.jsx","views/welcome.jsx","utils.js","views/play.jsx","views/result.jsx","game.jsx","index.jsx"],"names":["SplashView","children","className","join","src","thumbUpUrl","alt","width","height","Button","href","tag","Tag","restProps","defaultProps","Option","status","htmlProps","type","aria-pressed","OptionList","items","onSelect","map","caption","value","selected","correct","find","truthy","onClick","Step","StepList","WelcomeView","onStart","currencyFormat","Intl","NumberFormat","style","currency","maximumFractionDigits","formatCurrency","n","format","PlayView","levels","reward","question","answers","onAnswer","initialState","useState","isOpen","setOpen","toggleSidebar","useCallback","useSidebarToggle","levelsMenuOpen","toggleLevelsMenu","optionItems","stepItems","levelReward","current","passed","ResultView","finalReward","onRetry","initGame","levelsConfig","config","randomizedQuestions","questions","slice","sort","Math","floor","random","usedQuestions","Set","level","q","has","difficulty","add","useGameLogic","levelsRef","useRef","useGameLevels","resetLevels","currentLevelIndex","setCurrentLevelIndex","isOver","setOver","currentLevel","currentQuestion","currentReward","processAnswer","userValue","selectedAnswer","checkAnswer","targetLevelIndex","length","restart","Game","game","sourceAnswers","timeout","userAnswerValue","setUserAnswerValue","setTimeout","useAnswerDelay","currentFound","result","generateUserPath","gameStarted","setStarted","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e36ae8c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/thumb-up.df3dc3a8.svg\";","import React from 'react';\nimport thumbUpUrl from './thumb-up.svg';\nimport './splash.css';\n\nconst SplashView = ({ children, className }) => (\n  <div className={['splash-view inline-content block-content', className || ''].join(' ')}>\n    <aside>\n      <img className=\"splash-view-image\" src={thumbUpUrl} alt=\"\" width=\"312\" height=\"184\" />\n    </aside>\n\n    <main>\n      {children}\n    </main>\n  </div>\n);\n\nexport default SplashView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './button.css';\n\nconst Button = ({\n  children, className, href, tag: Tag = href ? 'a' : 'button', ...restProps\n}) => <Tag className={['button', className].join(' ')} href={href} {...restProps}>{children}</Tag>;\n\nButton.propTypes = {\n  href: PropTypes.string,\n};\n\nButton.defaultProps = {\n  href: null,\n};\n\nexport default Button;\n","import React from 'react';\nimport './option.css';\n\nconst Option = ({\n  children, className, status, ...htmlProps\n}) => (\n  <li\n    className={['option', status || '', className].join(' ')}\n    {...htmlProps}\n  >\n    <button type=\"button\" aria-pressed={status === 'selected'}>\n      {children}\n    </button>\n  </li>\n);\n\nconst OptionList = ({\n  items, className, onSelect, ...restProps\n}) => (\n  <ol className={['option-list', className || ''].join(' ')} {...restProps}>\n    {items.map(({\n      caption, value, selected, correct,\n    }) => {\n      const status = [selected && !correct && 'wrong', correct && 'correct', selected && 'selected']\n        .find((truthy) => truthy);\n\n      return (\n        <Option\n          key={value}\n          status={status}\n          onClick={() => onSelect(value || caption)}\n        >\n          {caption || value}\n        </Option>\n      );\n    })}\n  </ol>\n);\n\nexport default Option;\nexport { OptionList };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './step.css';\n\nconst Step = ({\n  children, status, className, ...restProps\n}) => (\n  <li className={['step', status, className || ''].join(' ')} {...restProps}>{children}</li>\n);\n\nStep.propTypes = {\n  status: PropTypes.oneOf(['future', 'current', 'past']),\n};\n\nStep.defaultProps = {\n  status: 'future',\n};\n\nconst StepList = ({ items, className, ...restProps }) => (\n  <ol className={['step-list', className || ''].join(' ')} {...restProps}>\n    {items.map(({ caption, status = 'future' }) => (\n      <Step key={caption} status={status}>\n        {caption}\n      </Step>\n    ))}\n  </ol>\n);\n\nStepList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    caption: PropTypes.string,\n    status: Step.propTypes.status,\n  })).isRequired,\n};\n\nexport default Step;\nexport { StepList };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SplashView from './splash';\nimport { Button } from '../components';\n\nconst WelcomeView = ({ onStart }) => (\n  <SplashView className=\"welcome-view\">\n    <h1 className=\"headline\">Who wants to be a millionaire?</h1>\n    {onStart\n      && <Button onClick={onStart}>Start</Button>}\n  </SplashView>\n);\n\nWelcomeView.propTypes = {\n  onStart: PropTypes.func,\n};\n\nWelcomeView.defaultProps = {\n  onStart: null,\n};\n\nexport default WelcomeView;\n","const currencyFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  maximumFractionDigits: 0,\n});\n\nconst formatCurrency = (n) => currencyFormat.format(n);\n\n// eslint-disable-next-line import/prefer-default-export\nexport { formatCurrency };\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { OptionList, StepList } from '../components';\nimport { formatCurrency } from '../utils';\nimport './play.css';\n\nconst useSidebarToggle = (initialState = false) => {\n  const [isOpen, setOpen] = useState(initialState);\n  const toggleSidebar = useCallback(() => setOpen((value) => !value), [setOpen]);\n  return [isOpen, toggleSidebar];\n};\n\nconst PlayView = ({\n  levels, reward = 0, question, answers, onAnswer,\n}) => {\n  const [levelsMenuOpen, toggleLevelsMenu] = useSidebarToggle();\n  const optionItems = answers;\n  const stepItems = levels.map(({ reward: levelReward, current, passed }) => ({\n    caption: formatCurrency(levelReward),\n    status: [passed && 'past', current && 'current', 'future'].find((truthy) => truthy),\n  }));\n\n  return (\n    <div className=\"play-view\">\n      <h1 className=\"visually-hidden\">Who wants to be a millionaire?</h1>\n\n      <main className=\"play-view-main block-content inline-content\">\n        <h2 className=\"visually-hidden\">\n          Question for\n          {formatCurrency(reward)}\n        </h2>\n        <p className=\"question play-view-question\">{question}</p>\n        <OptionList\n          className=\"play-view-option-list\"\n          items={optionItems}\n          onSelect={onAnswer}\n        />\n      </main>\n\n      <aside className={`play-view-sidebar block-content ${levelsMenuOpen ? 'open' : ''}`}>\n        <h2 className=\"visually-hidden\">Game steps</h2>\n        <StepList items={stepItems} />\n      </aside>\n\n      <button className=\"play-view-sidebar-toggle\" type=\"button\" onClick={toggleLevelsMenu} aria-pressed={levelsMenuOpen}>\n        Open levels view\n      </button>\n    </div>\n  );\n};\n\nPlayView.propTypes = {\n  levels: PropTypes.arrayOf(PropTypes.shape({\n    reward: PropTypes.number.isRequired,\n    passed: PropTypes.bool.isRequired,\n    curret: PropTypes.bool.isRequired,\n  })).isRequired,\n  reward: PropTypes.number.isRequired,\n  question: PropTypes.string.isRequired,\n  answers: PropTypes.arrayOf(PropTypes.shape({\n    answer: PropTypes.string.isRequired,\n    selected: PropTypes.bool.isRequired,\n    correct: PropTypes.bool,\n  })).isRequired,\n  onAnswer: PropTypes.func.isRequired,\n};\n\nexport default PlayView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SplashView from './splash';\nimport { Button } from '../components';\n\nconst ResultView = ({ finalReward, onRetry }) => (\n  <SplashView className=\"result-view\">\n    <div>\n      <h2 className=\"question muted\">Total score:</h2>\n      <p className=\"headline\">\n        $&#x200A;\n        {finalReward}\n        {' '}\n        earned\n      </p>\n    </div>\n    {onRetry\n      && <Button onClick={onRetry}>Try again</Button>}\n  </SplashView>\n);\n\nResultView.propTypes = {\n  finalReward: PropTypes.number.isRequired,\n  onRetry: PropTypes.func,\n};\n\nResultView.defaultProps = {\n  onRetry: null,\n};\n\nexport default ResultView;\n","import React, { useRef, useState } from 'react';\nimport './game.css';\nimport { Welcome, Play, Result } from './views';\nimport config from './config.json';\n\nconst initGame = () => {\n  const levelsConfig = config.levels;\n  const randomizedQuestions = config.questions\n    .slice()\n    .sort(() => Math.floor(Math.random() * 10) - 5);\n\n  const usedQuestions = new Set();\n\n  const levels = levelsConfig.map((level) => {\n    const question = randomizedQuestions.find((q) => (\n      !usedQuestions.has(q) && q.difficulty === level.difficulty));\n    usedQuestions.add(question);\n\n    return {\n      ...level,\n      question,\n    };\n  });\n\n  return levels;\n};\n\nconst useGameLevels = () => {\n  const levelsRef = useRef(null);\n  if (levelsRef.current == null) levelsRef.current = initGame();\n\n  return [levelsRef.current, initGame];\n};\n\nconst useGameLogic = () => {\n  const [levels, resetLevels] = useGameLevels();\n  const [currentLevelIndex, setCurrentLevelIndex] = useState(0);\n  const [isOver, setOver] = useState(false);\n\n  const currentLevel = levels[currentLevelIndex];\n  const currentQuestion = currentLevel.question;\n\n  const checkAnswer = (userValue) => {\n    const { answers } = currentQuestion;\n    const selectedAnswer = answers.find(({ value: currentValue }) => currentValue === userValue);\n    return selectedAnswer && selectedAnswer.correct;\n  };\n\n  const processAnswer = (userValue) => {\n    if (checkAnswer(userValue)) {\n      const targetLevelIndex = currentLevelIndex + 1;\n      setCurrentLevelIndex(targetLevelIndex);\n      if (targetLevelIndex >= levels.length) setOver(true);\n    } else {\n      setOver(true);\n    }\n  };\n\n  const restart = () => {\n    resetLevels();\n    setCurrentLevelIndex(0);\n    setOver();\n  };\n\n  const currentReward = levels[currentLevelIndex - 1] != null\n    ? levels[currentLevelIndex - 1].reward\n    : 0;\n\n  return {\n    levels,\n    currentLevel,\n    currentReward,\n    isOver,\n    processAnswer,\n    restart,\n  };\n};\n\nconst useAnswerDelay = ({ answers: sourceAnswers, processAnswer }, { timeout = 2000 } = {}) => {\n  const [userAnswerValue, setUserAnswerValue] = useState('');\n\n  const answers = sourceAnswers.map(({ value, correct }) => ({\n    value,\n    correct: userAnswerValue !== '' && correct,\n    selected: value === userAnswerValue,\n  }));\n\n  const processAnswerDebounced = (userValue) => {\n    setUserAnswerValue(userValue);\n\n    setTimeout(() => {\n      processAnswer(userValue);\n      setUserAnswerValue('');\n    }, timeout);\n  };\n\n  return {\n    answers,\n    processAnswer: processAnswerDebounced,\n  };\n};\n\nconst generateUserPath = (levels, current) => {\n  let currentFound = false;\n  return levels.map((level) => {\n    const result = {\n      reward: level.reward,\n      current: level === current,\n      passed: !currentFound && level !== current,\n    };\n\n    if (level === current) currentFound = true;\n\n    return result;\n  });\n};\n\nconst Game = () => {\n  const game = useGameLogic();\n  const { answers, processAnswer } = useAnswerDelay({\n    answers: game.currentLevel.question.answers,\n    processAnswer: game.processAnswer,\n  });\n  const currentQuestion = game.currentLevel.question;\n  const levels = generateUserPath(game.levels, game.currentLevel);\n\n  const [gameStarted, setStarted] = useState(false);\n  if (!gameStarted) return <Welcome onStart={() => setStarted(true)} />;\n\n  return game.isOver ? (\n    <Result\n      finalReward={game.currentReward}\n      onRetry={game.restart}\n    />\n  ) : (\n    <Play\n      levels={levels}\n      question={currentQuestion.question}\n      answers={answers}\n      onAnswer={processAnswer}\n    />\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}